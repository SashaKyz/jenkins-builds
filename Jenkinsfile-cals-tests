



pipeline {
    agent none

    tools {
        gradle 'Gradle_3.5.1'
    }
    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5'))
        timestamps()
    }
    parameters {
        string(defaultValue: '', description: '', name: 'version')
        string(defaultValue: 'development', description: 'Tests source code branch name', name: 'branch')
        string(defaultValue: 'true', description: '', name: 'USE_NEWRELIC')
    }
    stages {
      stage('PreInt deployment'){
        agent {
            node {
                label "preint"
                customWorkspace '/opt/jenkins/workspace/AcceptanceTests/calsapi-tests'
            }
        }
        steps{
             git branch: 'master', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/de-ansible.git'
             environmentDashboard(addColumns: false, buildJob: '', buildNumber: "${version}", componentName: 'Cals-API', data: [], nameOfEnv: 'PREINT', packageName: 'Cals-API') {
             script{
                sh 'ansible-playbook -e NEW_RELIC_AGENT=$USE_NEWRELIC -e CALS_API_VERSION=$version -i inventories/preint/hosts.yml deploy-calsapi.yml --vault-password-file ~/.ssh/vault.txt '
             }
             }
        }
      }
      stage('Run preint functional test'){
        agent {
            node {
                label "preint"
                customWorkspace '/opt/jenkins/workspace/AcceptanceTests/calsapi-tests'
            }
        }
        steps{
           git branch: '$branch', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/cals-api.git'
           script{
              def serverArti = Artifactory.newServer url: 'http://pr.dev.cwds.io/artifactory'
              def rtGradle = Artifactory.newGradleBuild()
		      rtGradle.resolver server: serverArti
		      rtGradle.useWrapper = true
		      writeFile file: "gradle.properties", text: "cals.api.url=https://calsapi.preint.cwds.io/"
		      def buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'integrationTest'
           }
        }
        post {
            always {
		      publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/integrationTest', reportFiles: 'index.html', reportName: 'Pre Integration Test Report', reportTitles: ''])
            }
        }
      }
      stage('Integration deployment'){
        agent {
            node {
                label "int"
                customWorkspace '/opt/jenkins/workspace/AcceptanceTests/calsapi-tests'
            }
        }
        steps{
             git branch: 'master', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/de-ansible.git'
             environmentDashboard(addColumns: false, buildJob: '', buildNumber: "${version}", componentName: 'Cals-API', data: [], nameOfEnv: 'Integration', packageName: 'Cals-API') {
             script{
                sh 'ansible-playbook -e NEW_RELIC_AGENT=$USE_NEWRELIC -e CALS_API_VERSION=$version -i inventories/integration/hosts.yml deploy-calsapi.yml --vault-password-file ~/.ssh/vault.txt '
             }
             }
        }
      }
      stage('Run integration smoke test'){
        agent {
            node {
                label "int"
                customWorkspace '/opt/jenkins/workspace/AcceptanceTests/calsapi-tests'
            }
        }
        steps{
           git branch: '$branch', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'git@github.com:ca-cwds/cals-api.git'
           script{
              def serverArti = Artifactory.newServer url: 'http://pr.dev.cwds.io/artifactory'
              def rtGradle = Artifactory.newGradleBuild()
		      rtGradle.resolver server: serverArti
		      rtGradle.useWrapper = true
		      writeFile file: "gradle.properties", text: "cals.api.url=https://calsapi.integration.cwds.io/"
		      def buildInfo = rtGradle.run buildFile: 'build.gradle', tasks: 'smokeTest'

           }

        }
        post {
            always {
                publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'build/reports/tests/smokeTest', reportFiles: 'index.html', reportName: 'Integration Test Report', reportTitles: ''])
            }
        }
      }

    }
}
